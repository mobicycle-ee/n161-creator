import type { Env } from '../types';
import { BookService } from '../services/bookService';

export class VulnerabilityAssessmentAgent {
  private bookService: BookService;
  
  constructor(private env: Env) {
    this.bookService = new BookService(env);
  }
  
  async assessSection12(caseDetails: any, appellantInfo?: any) {
    // Check for vulnerability indicators
    const vulnerabilities = await this.identifyVulnerabilities(caseDetails, appellantInfo);
    
    if (!vulnerabilities || vulnerabilities.length === 0) {
      return {
        section: 'Section 12: Vulnerability',
        hasVulnerability: false,
        statement: 'No vulnerability issues requiring special measures',
        guidance: 'Leave blank unless party has specific vulnerabilities'
      };
    }
    
    // Get relevant content on vulnerable parties from legal books
    const legalContent = await this.bookService.getRelevantContent('vulnerable parties equality act disability');
    
    const vulnerabilityPrompt = `
      Assess vulnerability issues for N161 Section 12:
      
      Case: ${JSON.stringify(caseDetails)}
      Appellant: ${JSON.stringify(appellantInfo)}
      
      Consider:
      1. Physical disabilities requiring adjustments
      2. Mental health conditions affecting proceedings
      3. Learning disabilities or cognitive impairments
      4. Age-related vulnerabilities (elderly or child)
      5. Language barriers or communication difficulties
      6. Financial vulnerability affecting representation
      7. Domestic abuse or intimidation concerns
      8. Need for intermediary or support person
      
      Generate formal Section 12 content addressing:
      - Nature of vulnerability
      - Impact on ability to participate in proceedings
      - Specific adjustments required
      - Support measures needed
      - Equality Act 2010 duties
      - Practice Direction 1A considerations
    `;
    
    const analysis = await this.env.AI.run('@cf/meta/llama-3.1-8b-instruct', {
      prompt: vulnerabilityPrompt,
      max_tokens: 1000
    });
    
    return {
      section: 'Section 12: Vulnerability',
      hasVulnerability: true,
      vulnerabilities: vulnerabilities,
      statement: this.generateVulnerabilityStatement(vulnerabilities, analysis.response),
      adjustments: this.determineAdjustments(vulnerabilities),
      supportMeasures: this.determineSupportMeasures(vulnerabilities),
      equalityActDuties: this.getEqualityActDuties(vulnerabilities),
      bookReferences: legalContent.slice(0, 3),
      courtDuties: [
        'Court must consider vulnerability under Practice Direction 1A',
        'Duty to ensure equal participation under Equality Act 2010',
        'Obligation to provide reasonable adjustments',
        'Consider ground rules hearing if necessary'
      ]
    };
  }
  
  private async identifyVulnerabilities(caseDetails: any, appellantInfo?: any): Promise<string[]> {
    const vulnerabilities = [];
    
    const indicators = {
      disability: ['disabled', 'disability', 'wheelchair', 'mobility', 'blind', 'deaf', 'impaired'],
      mentalHealth: ['mental health', 'anxiety', 'depression', 'ptsd', 'psychiatric', 'psychological'],
      cognitive: ['learning disability', 'autism', 'adhd', 'dementia', 'cognitive', 'capacity'],
      age: ['elderly', 'child', 'minor', 'aged', 'vulnerable adult'],
      language: ['interpreter', 'translation', 'non-english', 'language barrier'],
      abuse: ['domestic violence', 'abuse', 'intimidation', 'coercion', 'harassment'],
      financial: ['unrepresented', 'litigant in person', 'legal aid', 'impecunious']
    };
    
    const combinedText = JSON.stringify(caseDetails).toLowerCase() + 
                        JSON.stringify(appellantInfo).toLowerCase();
    
    for (const [type, keywords] of Object.entries(indicators)) {
      if (keywords.some(keyword => combinedText.includes(keyword))) {
        vulnerabilities.push(type);
      }
    }
    
    return vulnerabilities;
  }
  
  private generateVulnerabilityStatement(vulnerabilities: string[], aiResponse: string): string {
    const intro = 'The Appellant is a vulnerable party requiring special measures and adjustments.';
    
    const vulnerabilityDescriptions = {
      disability: 'The Appellant has physical disabilities affecting their ability to access court facilities and participate in proceedings.',
      mentalHealth: 'The Appellant suffers from mental health conditions that may affect their ability to give evidence and participate effectively.',
      cognitive: 'The Appellant has cognitive impairments requiring additional support and adjusted communication methods.',
      age: 'The Appellant\'s age renders them vulnerable and requiring additional protections.',
      language: 'The Appellant requires interpreter services and translated documents to ensure equal participation.',
      abuse: 'The Appellant has been subject to abuse/intimidation requiring protective measures.',
      financial: 'The Appellant is financially vulnerable and unrepresented, requiring additional judicial assistance.'
    };
    
    const descriptions = vulnerabilities
      .map(v => vulnerabilityDescriptions[v])
      .filter(Boolean)
      .join(' ');
    
    return `${intro} ${descriptions} The Court is requested to make appropriate adjustments under the Equality Act 2010 and Practice Direction 1A to ensure fair and equal participation in these proceedings.`;
  }
  
  private determineAdjustments(vulnerabilities: string[]): any {
    const adjustments = {
      physical: [],
      procedural: [],
      communication: [],
      evidence: []
    };
    
    if (vulnerabilities.includes('disability')) {
      adjustments.physical.push('Step-free access to courtroom');
      adjustments.physical.push('Accessible seating arrangements');
      adjustments.procedural.push('Regular breaks every 30 minutes');
    }
    
    if (vulnerabilities.includes('mentalHealth') || vulnerabilities.includes('cognitive')) {
      adjustments.procedural.push('Shorter hearing sessions');
      adjustments.communication.push('Simple, clear language');
      adjustments.evidence.push('Questions in writing in advance');
      adjustments.evidence.push('Video link evidence if appropriate');
    }
    
    if (vulnerabilities.includes('language')) {
      adjustments.communication.push('Qualified interpreter');
      adjustments.procedural.push('Additional time for translation');
      adjustments.communication.push('Key documents translated');
    }
    
    if (vulnerabilities.includes('abuse')) {
      adjustments.procedural.push('Separate waiting areas');
      adjustments.evidence.push('Screens in court');
      adjustments.evidence.push('Video link for evidence');
      adjustments.procedural.push('Separate entrance/exit times');
    }
    
    return adjustments;
  }
  
  private determineSupportMeasures(vulnerabilities: string[]): any {
    const measures = [];
    
    if (vulnerabilities.includes('cognitive') || vulnerabilities.includes('mentalHealth')) {
      measures.push('Intermediary to assist with communication');
      measures.push('Support person/McKenzie friend permitted');
    }
    
    if (vulnerabilities.includes('financial')) {
      measures.push('Assistance with form completion');
      measures.push('Judicial guidance on procedure');
      measures.push('Consideration for urgent legal aid');
    }
    
    if (vulnerabilities.includes('disability')) {
      measures.push('Carer/assistant permitted in court');
      measures.push('Documents in accessible format');
    }
    
    return measures;
  }
  
  private getEqualityActDuties(vulnerabilities: string[]): any {
    return {
      section20: 'Duty to make reasonable adjustments',
      section29: 'Duty not to discriminate in provision of services',
      section149: 'Public sector equality duty',
      anticipatoryDuty: 'Court must anticipate and address needs',
      proportionateResponse: 'Adjustments must be proportionate to needs'
    };
  }
}